/* The following code was generated by JFlex 1.6.1 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
 * Portions Copyright (c) 2016 Nikolay Denev.
 */

/*
 * Cross reference a Rust file
 */

package org.opensolaris.opengrok.analysis.rust;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/myworld/github/OpenGrok/src/org/opensolaris/opengrok/analysis/rust/RustXref.lex</tt>
 */
public class RustXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int SCOMMENT = 6;
  public static final int QSTRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\50\1\46"+
    "\1\54\2\6\1\53\1\47\2\54\1\51\1\37\1\6\1\10\1\11"+
    "\1\33\1\34\11\5\1\55\1\43\1\44\1\6\1\45\1\6\1\56"+
    "\1\32\1\35\1\15\1\30\1\36\1\20\1\4\1\23\1\27\1\40"+
    "\1\4\1\25\1\24\1\17\1\16\1\31\1\4\1\12\1\14\1\21"+
    "\3\4\1\22\2\4\1\54\1\52\2\54\1\7\1\54\1\32\1\35"+
    "\1\15\1\30\1\36\1\20\1\4\1\23\1\27\1\40\1\4\1\25"+
    "\1\24\1\17\1\16\1\31\1\4\1\12\1\14\1\21\3\4\1\22"+
    "\2\4\1\41\1\54\1\42\1\6\261\0\2\26\115\0\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufe90\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\5\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\2\2\16\5\4\1\11\1\17\2\4\1\20\1\4"+
    "\1\21\1\0\1\5\1\0\1\22\1\23\1\5\12\0"+
    "\1\24\1\25\1\26\1\0\1\27\2\5\1\0\1\30"+
    "\1\31\1\0\1\5\20\0\1\2\1\32\1\5\12\0"+
    "\2\33\11\0\1\34\20\0\1\33\2\0\1\35\2\0"+
    "\1\36\10\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\353\0\u0178\0\u01a7\0\353\0\u01d6\0\u0205\0\353\0\353"+
    "\0\353\0\u0234\0\353\0\353\0\353\0\353\0\u0263\0\u0292"+
    "\0\353\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\353\0\353"+
    "\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0178\0\u0468\0\u0497\0\u04c6"+
    "\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u02c1\0\u05e0\0\u060f"+
    "\0\u063e\0\u02f0\0\u066d\0\u069c\0\u06cb\0\353\0\353\0\353"+
    "\0\u06fa\0\353\0\u0729\0\u0758\0\u0787\0\353\0\353\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u0ad5\0\353\0\353\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\353\0\u02c1"+
    "\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142"+
    "\0\u1171\0\u11a0\0\u0d67\0\u11cf\0\u11fe\0\u0edf\0\u122d\0\u125c"+
    "\0\353\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u13d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\12"+
    "\2\14\1\12\1\6\12\12\1\6\4\12\1\15\1\16"+
    "\2\12\1\14\1\12\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\3\14\1\26\3\14\1\6\1\27\1\30"+
    "\1\31\1\32\1\33\1\14\3\33\1\32\1\6\4\32"+
    "\1\34\2\32\1\35\2\32\1\6\4\32\1\36\1\33"+
    "\2\32\1\14\1\32\3\14\1\37\1\23\1\40\3\14"+
    "\1\41\1\26\3\14\1\6\1\7\1\10\1\11\7\14"+
    "\1\6\12\14\1\6\15\14\1\37\1\23\3\14\1\42"+
    "\1\14\1\26\3\14\1\6\1\27\1\30\1\31\1\32"+
    "\1\33\1\14\3\33\1\32\1\6\4\32\1\34\2\32"+
    "\1\35\2\32\1\6\4\32\1\36\1\33\2\32\1\14"+
    "\1\32\3\14\1\37\1\23\5\14\1\26\3\14\1\6"+
    "\1\27\1\30\1\31\1\32\1\33\1\14\3\33\1\32"+
    "\1\6\4\32\1\34\2\32\1\35\2\32\1\6\4\32"+
    "\1\36\1\33\2\32\1\14\1\32\3\14\1\37\1\23"+
    "\1\14\1\43\2\14\1\44\1\26\3\14\60\0\1\7"+
    "\1\10\1\11\56\0\1\11\57\0\2\45\1\0\1\45"+
    "\2\0\1\45\1\0\12\45\1\0\4\45\1\0\3\45"+
    "\1\0\1\45\23\0\1\13\3\0\1\46\4\0\1\47"+
    "\3\0\1\47\2\0\1\47\6\0\1\13\1\47\1\50"+
    "\1\0\1\47\51\0\1\51\15\0\1\52\12\0\1\13"+
    "\3\0\1\46\4\0\1\47\3\0\1\53\2\0\1\47"+
    "\6\0\1\13\1\47\1\50\1\0\1\47\22\0\1\54"+
    "\5\0\1\54\1\0\12\54\1\0\4\54\1\55\1\0"+
    "\2\54\1\0\1\54\17\0\1\27\1\30\1\31\56\0"+
    "\1\31\57\0\2\56\1\0\2\56\1\57\1\56\1\0"+
    "\12\56\1\0\4\56\1\60\3\56\1\0\1\56\15\0"+
    "\1\61\4\0\2\62\1\0\4\62\1\0\12\62\1\0"+
    "\4\62\1\0\3\62\1\0\1\62\15\0\1\61\4\0"+
    "\2\56\1\0\2\56\1\57\1\56\1\0\5\56\1\63"+
    "\4\56\1\0\4\56\1\60\3\56\1\0\1\56\15\0"+
    "\1\61\4\0\2\56\1\0\2\56\1\57\1\56\1\0"+
    "\5\56\1\64\4\56\1\0\4\56\1\60\3\56\1\0"+
    "\1\56\15\0\1\61\4\0\1\65\5\0\1\65\1\0"+
    "\12\65\1\0\4\65\2\0\2\65\1\0\1\65\64\0"+
    "\1\66\3\0\1\67\37\0\1\70\24\0\1\71\124\0"+
    "\1\72\2\0\1\67\11\0\1\73\26\0\1\73\40\0"+
    "\1\47\3\0\1\47\2\0\1\47\7\0\1\47\2\0"+
    "\1\47\23\0\1\74\2\0\1\75\23\0\1\74\2\0"+
    "\1\75\52\0\1\76\14\0\1\77\57\0\1\100\12\0"+
    "\1\101\7\0\1\101\1\47\1\0\1\101\1\0\1\47"+
    "\2\0\1\47\2\0\1\101\1\0\1\101\1\0\3\101"+
    "\1\0\1\47\22\0\2\54\1\0\2\54\1\102\1\54"+
    "\1\0\12\54\1\0\4\54\1\103\3\54\1\0\1\54"+
    "\22\0\1\104\5\0\1\104\1\0\12\104\1\0\4\104"+
    "\2\0\2\104\1\0\1\104\22\0\2\56\1\0\2\56"+
    "\1\57\1\105\1\0\1\56\1\106\3\56\1\107\1\110"+
    "\1\111\2\56\1\112\1\113\1\114\1\115\1\56\1\60"+
    "\3\56\1\0\1\56\15\0\1\61\4\0\1\116\5\0"+
    "\1\116\1\0\12\116\1\0\4\116\2\0\2\116\1\0"+
    "\1\116\22\0\2\117\1\0\4\117\1\0\12\117\1\0"+
    "\4\117\1\0\3\117\1\0\1\117\22\0\2\56\1\0"+
    "\2\56\1\57\1\56\1\0\12\56\1\0\2\56\1\120"+
    "\1\56\1\60\3\56\1\0\1\56\15\0\1\61\4\0"+
    "\2\56\1\0\2\56\1\57\1\56\1\0\5\56\1\121"+
    "\4\56\1\0\4\56\1\60\3\56\1\0\1\56\15\0"+
    "\1\61\4\0\2\65\1\0\4\65\1\0\12\65\1\0"+
    "\4\65\1\60\3\65\1\0\1\65\17\0\1\71\45\0"+
    "\1\122\14\0\1\73\10\0\1\47\3\0\1\47\2\0"+
    "\1\47\6\0\1\73\1\47\1\50\1\0\1\47\23\0"+
    "\1\74\10\0\1\47\3\0\1\47\2\0\1\47\6\0"+
    "\1\74\1\47\2\0\1\47\23\0\1\74\26\0\1\74"+
    "\22\0\33\123\1\0\23\123\5\0\1\101\7\0\1\101"+
    "\1\47\1\0\1\101\1\0\1\47\2\0\1\47\2\0"+
    "\1\101\1\0\1\101\1\0\2\101\1\124\1\0\1\47"+
    "\22\0\2\54\1\0\2\54\1\102\1\125\1\0\1\54"+
    "\1\126\3\54\1\127\1\130\1\131\2\54\1\132\1\133"+
    "\1\134\1\135\1\54\1\103\3\54\1\0\1\54\22\0"+
    "\1\136\5\0\1\136\1\0\12\136\1\0\4\136\2\0"+
    "\2\136\1\0\1\136\22\0\2\104\1\0\4\104\1\0"+
    "\12\104\1\0\4\104\1\103\3\104\1\0\1\104\22\0"+
    "\2\56\1\0\2\56\1\57\1\56\1\137\1\140\11\56"+
    "\1\0\4\56\1\60\3\56\1\0\1\56\15\0\1\61"+
    "\4\0\2\56\1\0\2\56\1\57\1\56\1\0\2\56"+
    "\1\141\7\56\1\0\4\56\1\60\3\56\1\0\1\56"+
    "\15\0\1\61\4\0\2\56\1\0\2\56\1\57\1\56"+
    "\1\0\6\56\1\142\3\56\1\0\4\56\1\60\3\56"+
    "\1\0\1\56\15\0\1\61\4\0\2\56\1\0\2\56"+
    "\1\57\1\56\1\0\10\56\1\143\1\56\1\0\4\56"+
    "\1\60\3\56\1\0\1\56\15\0\1\61\4\0\2\56"+
    "\1\0\2\56\1\57\1\56\1\0\5\56\1\144\4\56"+
    "\1\0\4\56\1\60\3\56\1\0\1\56\15\0\1\61"+
    "\17\0\1\145\43\0\2\56\1\0\2\56\1\57\1\56"+
    "\1\0\3\56\1\146\6\56\1\0\4\56\1\60\3\56"+
    "\1\0\1\56\15\0\1\61\4\0\2\56\1\0\2\56"+
    "\1\57\1\56\1\0\12\56\1\147\1\150\3\56\1\60"+
    "\3\56\1\0\1\56\15\0\1\61\4\0\2\56\1\0"+
    "\2\56\1\57\1\56\1\0\12\56\1\0\3\56\1\151"+
    "\1\60\3\56\1\0\1\56\15\0\1\61\4\0\2\152"+
    "\1\0\3\116\1\152\1\0\12\152\1\0\4\152\1\0"+
    "\3\152\1\0\1\152\22\0\2\117\1\0\2\117\1\153"+
    "\1\117\1\0\12\117\1\0\4\117\1\0\3\117\1\0"+
    "\1\117\22\0\2\56\1\0\2\56\1\57\1\56\1\0"+
    "\12\56\1\0\4\56\1\60\3\56\1\0\1\56\14\0"+
    "\1\154\1\61\4\0\2\56\1\0\2\56\1\57\1\56"+
    "\1\0\12\56\1\0\2\56\1\155\1\56\1\60\3\56"+
    "\1\0\1\56\15\0\1\61\5\0\1\101\2\0\1\75"+
    "\4\0\1\101\1\47\1\0\1\101\1\0\1\47\2\0"+
    "\1\47\2\0\1\101\1\0\1\101\1\0\2\101\1\124"+
    "\1\75\1\47\22\0\2\54\1\0\2\54\1\102\1\54"+
    "\1\156\1\157\11\54\1\0\4\54\1\103\3\54\1\0"+
    "\1\54\22\0\2\54\1\0\2\54\1\102\1\54\1\0"+
    "\2\54\1\160\7\54\1\0\4\54\1\103\3\54\1\0"+
    "\1\54\22\0\2\54\1\0\2\54\1\102\1\54\1\0"+
    "\6\54\1\161\3\54\1\0\4\54\1\103\3\54\1\0"+
    "\1\54\22\0\2\54\1\0\2\54\1\102\1\54\1\0"+
    "\10\54\1\162\1\54\1\0\4\54\1\103\3\54\1\0"+
    "\1\54\22\0\2\54\1\0\2\54\1\102\1\54\1\0"+
    "\5\54\1\163\4\54\1\0\4\54\1\103\3\54\1\0"+
    "\1\54\35\0\1\164\43\0\2\54\1\0\2\54\1\102"+
    "\1\54\1\0\3\54\1\165\6\54\1\0\4\54\1\103"+
    "\3\54\1\0\1\54\22\0\2\54\1\0\2\54\1\102"+
    "\1\54\1\0\12\54\1\166\1\167\3\54\1\103\3\54"+
    "\1\0\1\54\22\0\2\54\1\0\2\54\1\102\1\54"+
    "\1\0\12\54\1\0\3\54\1\170\1\103\3\54\1\0"+
    "\1\54\22\0\2\171\1\0\3\136\1\171\1\0\12\171"+
    "\1\0\4\171\1\0\3\171\1\0\1\171\22\0\2\56"+
    "\1\0\2\56\1\57\1\56\1\0\3\56\1\172\6\56"+
    "\1\0\4\56\1\60\3\56\1\0\1\56\15\0\1\61"+
    "\4\0\2\56\1\0\2\56\1\57\1\56\1\0\5\56"+
    "\1\140\4\56\1\0\4\56\1\60\3\56\1\0\1\56"+
    "\15\0\1\61\4\0\2\56\1\0\2\56\1\57\1\56"+
    "\1\0\11\56\1\140\1\0\4\56\1\60\3\56\1\0"+
    "\1\56\15\0\1\61\4\0\2\56\1\0\2\56\1\57"+
    "\1\56\1\0\10\56\1\173\1\56\1\0\4\56\1\60"+
    "\3\56\1\0\1\56\15\0\1\61\26\0\2\137\33\0"+
    "\2\56\1\0\2\56\1\57\1\56\1\0\12\56\1\137"+
    "\1\140\3\56\1\60\3\56\1\0\1\56\15\0\1\61"+
    "\20\0\1\174\42\0\2\56\1\0\2\56\1\57\1\56"+
    "\1\0\4\56\1\172\5\56\1\0\4\56\1\60\3\56"+
    "\1\0\1\56\15\0\1\61\4\0\2\56\1\0\2\56"+
    "\1\57\1\56\1\0\5\56\1\175\4\56\1\0\4\56"+
    "\1\60\3\56\1\0\1\56\15\0\1\61\4\0\2\152"+
    "\1\0\3\116\1\152\1\0\12\152\1\0\4\152\1\60"+
    "\3\152\1\0\1\152\22\0\2\176\1\0\4\176\1\0"+
    "\12\176\1\0\4\176\1\0\3\176\1\0\1\176\51\0"+
    "\1\177\27\0\2\56\1\0\2\56\1\57\1\56\1\200"+
    "\1\120\11\56\1\0\4\56\1\60\3\56\1\0\1\56"+
    "\14\0\1\154\1\61\45\0\1\201\15\0\2\54\1\0"+
    "\2\54\1\102\1\54\1\0\12\54\1\0\4\54\1\103"+
    "\3\54\1\0\1\54\4\0\1\201\15\0\2\54\1\0"+
    "\2\54\1\102\1\54\1\0\3\54\1\202\6\54\1\0"+
    "\4\54\1\103\3\54\1\0\1\54\22\0\2\54\1\0"+
    "\2\54\1\102\1\54\1\0\5\54\1\157\4\54\1\0"+
    "\4\54\1\103\3\54\1\0\1\54\22\0\2\54\1\0"+
    "\2\54\1\102\1\54\1\0\11\54\1\157\1\0\4\54"+
    "\1\103\3\54\1\0\1\54\22\0\2\54\1\0\2\54"+
    "\1\102\1\54\1\0\10\54\1\203\1\54\1\0\4\54"+
    "\1\103\3\54\1\0\1\54\44\0\2\156\33\0\2\54"+
    "\1\0\2\54\1\102\1\54\1\0\12\54\1\156\1\157"+
    "\3\54\1\103\3\54\1\0\1\54\36\0\1\204\42\0"+
    "\2\54\1\0\2\54\1\102\1\54\1\0\4\54\1\202"+
    "\5\54\1\0\4\54\1\103\3\54\1\0\1\54\22\0"+
    "\2\54\1\0\2\54\1\102\1\54\1\0\5\54\1\205"+
    "\4\54\1\0\4\54\1\103\3\54\1\0\1\54\22\0"+
    "\2\171\1\0\3\136\1\171\1\0\12\171\1\0\4\171"+
    "\1\103\3\171\1\0\1\171\4\0\1\201\15\0\2\56"+
    "\1\0\2\56\1\57\1\56\1\0\4\56\1\140\5\56"+
    "\1\0\4\56\1\60\3\56\1\0\1\56\15\0\1\61"+
    "\20\0\1\137\42\0\2\56\1\0\2\56\1\57\1\56"+
    "\1\0\1\56\1\206\10\56\1\0\4\56\1\60\3\56"+
    "\1\0\1\56\15\0\1\61\33\0\1\207\100\0\1\154"+
    "\5\0\2\54\1\0\2\54\1\102\1\54\1\0\4\54"+
    "\1\157\5\54\1\0\4\54\1\103\3\54\1\0\1\54"+
    "\22\0\2\54\1\0\2\54\1\102\1\54\1\0\11\54"+
    "\1\157\1\0\4\54\1\103\3\54\1\0\1\54\4\0"+
    "\1\201\31\0\1\156\42\0\2\54\1\0\2\54\1\102"+
    "\1\54\1\0\1\54\1\210\10\54\1\0\4\54\1\103"+
    "\3\54\1\0\1\54\22\0\2\56\1\0\2\56\1\57"+
    "\1\56\1\0\7\56\1\140\2\56\1\0\4\56\1\60"+
    "\3\56\1\0\1\56\15\0\1\61\4\0\7\211\1\0"+
    "\12\211\1\0\12\211\2\0\1\211\4\0\4\211\1\0"+
    "\2\211\4\0\2\54\1\0\2\54\1\102\1\54\1\0"+
    "\7\54\1\157\2\54\1\0\4\54\1\103\3\54\1\0"+
    "\1\54\22\0\2\212\4\211\1\212\1\0\12\212\1\0"+
    "\10\212\1\211\1\212\2\0\1\211\4\0\4\211\1\0"+
    "\2\211";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5123];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\2\1\1\11\2\1\3\11"+
    "\1\1\4\11\2\1\1\11\5\1\2\11\5\1\1\0"+
    "\1\1\1\0\3\1\12\0\3\11\1\0\1\11\2\1"+
    "\1\0\2\11\1\0\1\1\20\0\2\11\1\1\12\0"+
    "\1\11\1\1\11\0\1\1\20\0\1\1\2\0\1\1"+
    "\2\0\1\11\10\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RustXref(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { writeUnicodeChar(yycharat(0));
            }
          case 32: break;
          case 2: 
            { out.write(yytext());
            }
          case 33: break;
          case 3: 
            { startNewLine();
            }
          case 34: break;
          case 4: 
            { out.write(yycharat(0));
            }
          case 35: break;
          case 5: 
            { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
            }
          case 36: break;
          case 6: 
            { incScope(); writeUnicodeChar(yycharat(0));
            }
          case 37: break;
          case 7: 
            { decScope(); writeUnicodeChar(yycharat(0));
            }
          case 38: break;
          case 8: 
            { endScope(); writeUnicodeChar(yycharat(0));
            }
          case 39: break;
          case 9: 
            { out.write( "&lt;");
            }
          case 40: break;
          case 10: 
            { out.write( "&gt;");
            }
          case 41: break;
          case 11: 
            { yybegin(STRING); out.write("<span class=\"s\">\"");
            }
          case 42: break;
          case 12: 
            { yybegin(QSTRING); out.write("<span class=\"s\">\'");
            }
          case 43: break;
          case 13: 
            { out.write( "&amp;");
            }
          case 44: break;
          case 14: 
            { yybegin(YYINITIAL); out.write("</span>"); startNewLine();
            }
          case 45: break;
          case 15: 
            { yybegin(YYINITIAL); out.write("\"</span>");
            }
          case 46: break;
          case 16: 
            { yybegin(YYINITIAL); out.write("'</span>");
            }
          case 47: break;
          case 17: 
            { String id = yytext(); writeSymbol(id, Consts.kwd, yyline);
            }
          case 48: break;
          case 18: 
            { yybegin(SCOMMENT); out.write("<span class=\"c\">//");
            }
          case 49: break;
          case 19: 
            { yybegin(COMMENT); out.write("<span class=\"c\">/*");
            }
          case 50: break;
          case 20: 
            { out.write("\\\"");
            }
          case 51: break;
          case 21: 
            { out.write("\\\\");
            }
          case 52: break;
          case 22: 
            { yybegin(YYINITIAL); out.write("*/</span>");
            }
          case 53: break;
          case 23: 
            { out.write("\\\'");
            }
          case 54: break;
          case 24: 
            { yybegin(SCOMMENT); out.write("<span class=\"c\">///");
            }
          case 55: break;
          case 25: 
            { yybegin(SCOMMENT); out.write("<span class=\"c\">//!");
            }
          case 56: break;
          case 26: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { yybegin(COMMENT); out.write("<span class=\"c\">/**");
            }
          case 57: break;
          case 27: 
            { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
            }
          case 58: break;
          case 28: 
            { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
            }
          case 59: break;
          case 29: 
            { writeEMailAddress(yytext());
            }
          case 60: break;
          case 30: 
            { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
            }
          case 61: break;
          case 31: 
            { appendLink(yytext());
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
