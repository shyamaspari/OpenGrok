/* The following code was generated by JFlex 1.6.1 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2006, 2016, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Java file
 */

package org.opensolaris.opengrok.analysis.java;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/myworld/github/OpenGrok/src/org/opensolaris/opengrok/analysis/java/JavaXref.lex</tt>
 */
public class JavaXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int SCOMMENT = 6;
  public static final int QSTRING = 8;
  public static final int JAVADOC = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\52"+
    "\1\57\2\6\1\56\1\53\2\57\1\54\1\41\1\6\1\10\1\11"+
    "\1\36\1\37\11\5\1\60\1\51\1\45\1\6\1\46\1\6\1\43"+
    "\1\13\1\40\1\31\1\35\1\20\1\33\1\4\1\34\1\23\1\12"+
    "\1\4\1\30\1\27\1\32\1\17\1\15\1\4\1\16\1\25\1\21"+
    "\1\42\1\14\1\44\1\26\2\4\1\57\1\55\2\57\1\7\1\57"+
    "\1\13\1\40\1\31\1\35\1\20\1\33\1\4\1\34\1\23\1\12"+
    "\1\4\1\30\1\27\1\32\1\17\1\15\1\4\1\16\1\25\1\21"+
    "\1\42\1\14\1\44\1\26\2\4\1\47\1\57\1\50\1\6\261\0"+
    "\2\22\115\0\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufe90\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\5\4\1\6\1\16\2\4\1\2\2\17\1\20\2\4"+
    "\1\21\2\0\1\5\1\22\1\23\14\0\1\24\1\25"+
    "\1\26\1\0\1\27\4\0\2\5\2\0\1\5\20\0"+
    "\1\2\4\30\1\31\1\5\26\0\1\32\3\0\3\30"+
    "\16\0\1\33\3\0\1\33\1\0\1\33\1\0\1\34"+
    "\2\0\3\30\11\0\1\35\3\0\3\30\5\0\1\30"+
    "\1\0\1\30\2\0\1\36\3\0\1\30\3\0\1\37"+
    "\2\0\1\30\5\0\1\37\4\0\1\37\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u0126\0\u01b9\0\u01ea\0\u0126\0\u021b\0\u024c\0\u027d"+
    "\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u0126\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0126\0\u0498\0\u04c9\0\u04fa\0\u01b9\0\u052b"+
    "\0\u055c\0\u058d\0\u0126\0\u05be\0\u05ef\0\u0620\0\u0651\0\u02ae"+
    "\0\u0682\0\u06b3\0\u06e4\0\u02df\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u0126\0\u0126\0\u0126\0\u07d9\0\u0126\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0126\0\u080a"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0126\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u02ae\0\u15d2\0\u1603\0\u1634\0\u0126\0\u1665\0\u10d8\0\u1696"+
    "\0\u11fe\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u0126"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u1b2e\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1c85\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u0126\0\u2059"+
    "\0\u208a\0\u20bb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\2\15\10\13\1\7\1\13\1\7\11\13\1\16\1\17"+
    "\1\13\1\15\1\13\1\15\1\13\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\15\1\27\2\15\1\7"+
    "\1\10\1\11\1\12\1\30\1\31\1\15\3\31\10\30"+
    "\1\7\1\30\1\7\6\30\1\32\1\33\1\30\1\34"+
    "\1\31\1\30\1\15\1\30\1\15\1\30\1\35\1\21"+
    "\3\15\1\36\2\15\1\37\1\27\2\15\1\7\1\10"+
    "\1\11\1\12\1\30\1\31\1\15\3\31\10\30\1\7"+
    "\1\30\1\7\6\30\1\32\1\33\1\30\1\34\1\31"+
    "\1\30\1\15\1\30\1\15\1\30\1\35\1\21\5\15"+
    "\1\40\1\15\1\27\2\15\1\7\1\41\1\42\1\43"+
    "\1\30\1\31\1\15\3\31\10\30\1\7\1\30\1\7"+
    "\6\30\1\32\1\33\1\30\1\34\1\31\1\30\1\15"+
    "\1\30\1\15\1\30\1\35\1\21\7\15\1\27\2\15"+
    "\1\7\1\10\1\11\1\12\1\30\1\31\1\15\3\31"+
    "\10\30\1\7\1\30\1\7\6\30\1\32\1\33\1\30"+
    "\1\34\1\31\1\30\1\15\1\30\1\15\1\30\1\35"+
    "\1\21\4\15\1\44\1\15\1\45\1\27\2\15\1\7"+
    "\1\10\1\11\1\12\1\30\1\31\1\15\3\31\10\30"+
    "\1\7\1\30\1\7\6\30\1\32\1\33\1\30\1\34"+
    "\1\31\1\30\1\15\1\30\1\46\1\30\1\35\1\21"+
    "\5\15\1\40\1\15\1\27\2\15\62\0\1\10\1\11"+
    "\1\12\60\0\1\12\61\0\2\47\1\0\1\47\2\0"+
    "\10\47\1\0\1\47\1\0\11\47\1\0\2\47\1\0"+
    "\1\47\1\0\1\47\21\0\1\14\3\0\1\50\6\0"+
    "\1\51\7\0\1\52\2\0\1\52\1\0\1\52\1\0"+
    "\1\14\2\0\1\52\54\0\1\53\15\0\1\54\11\0"+
    "\1\14\3\0\1\50\6\0\1\51\5\0\1\55\1\0"+
    "\1\52\2\0\1\52\1\0\1\52\1\0\1\14\2\0"+
    "\1\52\22\0\1\56\5\0\10\56\1\0\1\56\1\0"+
    "\11\56\1\57\1\0\1\56\1\0\1\56\1\0\1\56"+
    "\20\0\2\60\1\0\2\60\1\61\10\60\1\0\1\60"+
    "\1\0\11\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\20\0\2\64\1\0\13\64\1\0\1\64\1\0\11\64"+
    "\1\0\2\64\1\0\1\64\1\63\1\64\20\0\2\60"+
    "\1\0\2\60\1\61\7\60\1\65\1\0\1\60\1\0"+
    "\11\60\1\62\2\60\1\0\1\60\1\63\1\60\20\0"+
    "\2\60\1\0\2\60\1\61\7\60\1\66\1\0\1\60"+
    "\1\0\11\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\20\0\1\67\5\0\10\67\1\0\1\67\1\0\11\67"+
    "\2\0\1\67\1\0\1\67\1\0\1\67\15\0\1\70"+
    "\131\0\1\71\2\0\1\72\41\0\1\73\23\0\1\41"+
    "\1\42\1\43\60\0\1\43\56\0\1\74\132\0\1\75"+
    "\1\0\1\72\7\0\1\76\2\0\1\76\2\0\3\76"+
    "\1\77\2\76\1\100\1\101\1\0\1\76\1\0\11\76"+
    "\2\0\1\76\1\0\1\76\1\0\1\76\21\0\1\102"+
    "\31\0\1\102\26\0\1\103\2\0\1\104\26\0\1\103"+
    "\1\0\1\104\47\0\1\52\2\0\1\52\1\0\1\52"+
    "\4\0\1\52\72\0\1\105\11\0\1\106\5\0\1\106"+
    "\4\0\1\106\10\0\1\106\1\0\1\106\1\0\1\106"+
    "\1\0\2\106\24\0\2\56\1\0\2\56\1\107\10\56"+
    "\1\0\1\56\1\0\11\56\1\110\2\56\1\0\1\56"+
    "\1\0\1\56\20\0\1\111\5\0\10\111\1\0\1\111"+
    "\1\0\11\111\2\0\1\111\1\0\1\111\1\0\1\111"+
    "\20\0\2\60\1\0\2\60\1\61\1\112\2\60\1\113"+
    "\3\60\1\114\1\115\1\116\1\0\1\60\1\117\2\60"+
    "\1\120\2\60\1\121\1\122\1\62\2\60\1\0\1\60"+
    "\1\63\1\60\20\0\1\123\5\0\10\123\1\0\1\123"+
    "\1\0\11\123\2\0\1\123\1\0\1\123\1\0\1\123"+
    "\20\0\2\124\1\0\13\124\1\0\1\124\1\0\11\124"+
    "\1\0\2\124\1\0\1\124\1\0\1\124\20\0\2\60"+
    "\1\0\2\60\1\61\3\60\1\125\4\60\1\0\1\60"+
    "\1\0\11\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\20\0\2\60\1\0\2\60\1\61\7\60\1\126\1\0"+
    "\1\60\1\0\11\60\1\62\2\60\1\0\1\60\1\63"+
    "\1\60\20\0\2\67\1\0\13\67\1\0\1\67\1\0"+
    "\11\67\1\62\2\67\1\0\1\67\1\0\1\67\15\0"+
    "\1\70\50\0\1\127\7\0\1\74\51\0\1\127\11\0"+
    "\2\130\1\0\1\130\2\0\10\130\1\0\1\130\1\0"+
    "\11\130\1\0\2\130\1\0\1\130\1\0\1\130\20\0"+
    "\2\130\1\0\1\130\2\0\1\130\1\131\6\130\1\0"+
    "\1\130\1\0\11\130\1\0\2\130\1\0\1\130\1\0"+
    "\1\130\20\0\2\130\1\0\1\130\2\0\10\130\1\0"+
    "\1\130\1\0\1\130\1\132\7\130\1\0\2\130\1\0"+
    "\1\130\1\0\1\130\20\0\2\130\1\0\1\130\2\0"+
    "\10\130\1\0\1\130\1\0\7\130\1\133\1\130\1\0"+
    "\2\130\1\0\1\130\1\0\1\130\21\0\1\102\12\0"+
    "\1\51\7\0\1\52\2\0\1\52\1\0\1\52\1\0"+
    "\1\102\2\0\1\52\23\0\1\103\22\0\1\52\2\0"+
    "\1\52\1\0\1\52\1\0\1\103\2\0\1\52\23\0"+
    "\1\103\31\0\1\103\21\0\36\134\1\0\22\134\5\0"+
    "\1\106\5\0\1\106\4\0\1\135\7\0\1\52\1\106"+
    "\1\0\1\106\1\0\1\106\1\0\2\106\1\0\1\52"+
    "\22\0\2\56\1\0\2\56\1\107\1\136\2\56\1\137"+
    "\3\56\1\140\1\141\1\142\1\0\1\56\1\143\2\56"+
    "\1\144\2\56\1\145\1\146\1\110\2\56\1\0\1\56"+
    "\1\0\1\56\20\0\1\147\5\0\10\147\1\0\1\147"+
    "\1\0\11\147\2\0\1\147\1\0\1\147\1\0\1\147"+
    "\20\0\2\111\1\0\13\111\1\0\1\111\1\0\11\111"+
    "\1\110\2\111\1\0\1\111\1\0\1\111\20\0\2\60"+
    "\1\0\2\60\1\61\1\60\1\150\6\60\1\0\1\60"+
    "\1\0\5\60\1\151\3\60\1\62\2\60\1\0\1\60"+
    "\1\63\1\60\20\0\2\60\1\0\2\60\1\61\1\60"+
    "\1\152\2\60\1\153\3\60\1\0\1\60\1\0\11\60"+
    "\1\62\2\60\1\0\1\60\1\63\1\60\20\0\2\60"+
    "\1\0\2\60\1\61\10\60\1\0\1\60\1\0\1\60"+
    "\1\154\7\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\46\0\1\155\32\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\0\1\60\1\0\5\60\1\156\3\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\20\0\2\60\1\0\2\60"+
    "\1\61\10\60\1\0\1\60\1\0\2\60\1\157\6\60"+
    "\1\62\2\60\1\0\1\60\1\63\1\60\20\0\2\60"+
    "\1\0\2\60\1\61\5\60\1\160\2\60\1\0\1\60"+
    "\1\0\11\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\20\0\2\60\1\0\2\60\1\61\7\60\1\161\1\0"+
    "\1\60\1\0\11\60\1\62\2\60\1\0\1\60\1\63"+
    "\1\60\20\0\2\60\1\0\2\60\1\61\10\60\1\162"+
    "\1\163\1\0\11\60\1\62\2\60\1\0\1\60\1\63"+
    "\1\60\20\0\2\164\1\0\3\123\10\164\1\0\1\164"+
    "\1\0\11\164\1\0\2\164\1\0\1\164\1\0\1\164"+
    "\20\0\2\124\1\0\2\124\1\165\10\124\1\0\1\124"+
    "\1\0\11\124\1\0\2\124\1\0\1\124\1\0\1\124"+
    "\20\0\2\60\1\0\2\60\1\61\10\60\1\0\1\60"+
    "\1\0\11\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\13\0\1\166\4\0\2\60\1\0\2\60\1\61\3\60"+
    "\1\167\4\60\1\0\1\60\1\0\11\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\20\0\2\130\1\0\1\130"+
    "\2\0\4\130\1\170\3\130\1\0\1\130\1\0\11\130"+
    "\1\0\2\130\1\0\1\130\1\0\1\130\20\0\2\130"+
    "\1\0\1\130\2\0\10\130\1\0\1\130\1\0\4\130"+
    "\1\171\4\130\1\0\2\130\1\0\1\130\1\0\1\130"+
    "\20\0\2\130\1\0\1\130\2\0\4\130\1\172\3\130"+
    "\1\0\1\130\1\0\11\130\1\0\2\130\1\0\1\130"+
    "\1\0\1\130\21\0\1\106\2\0\1\104\2\0\1\106"+
    "\4\0\1\135\7\0\1\52\1\106\1\0\1\106\1\0"+
    "\1\106\1\0\2\106\1\104\1\52\22\0\2\56\1\0"+
    "\2\56\1\107\1\56\1\173\6\56\1\0\1\56\1\0"+
    "\5\56\1\174\3\56\1\110\2\56\1\0\1\56\1\0"+
    "\1\56\20\0\2\56\1\0\2\56\1\107\1\56\1\175"+
    "\2\56\1\176\3\56\1\0\1\56\1\0\11\56\1\110"+
    "\2\56\1\0\1\56\1\0\1\56\20\0\2\56\1\0"+
    "\2\56\1\107\10\56\1\0\1\56\1\0\1\56\1\177"+
    "\7\56\1\110\2\56\1\0\1\56\1\0\1\56\46\0"+
    "\1\200\32\0\2\56\1\0\2\56\1\107\10\56\1\0"+
    "\1\56\1\0\5\56\1\201\3\56\1\110\2\56\1\0"+
    "\1\56\1\0\1\56\20\0\2\56\1\0\2\56\1\107"+
    "\10\56\1\0\1\56\1\0\2\56\1\202\6\56\1\110"+
    "\2\56\1\0\1\56\1\0\1\56\20\0\2\56\1\0"+
    "\2\56\1\107\5\56\1\203\2\56\1\0\1\56\1\0"+
    "\11\56\1\110\2\56\1\0\1\56\1\0\1\56\20\0"+
    "\2\56\1\0\2\56\1\107\7\56\1\204\1\0\1\56"+
    "\1\0\11\56\1\110\2\56\1\0\1\56\1\0\1\56"+
    "\20\0\2\56\1\0\2\56\1\107\10\56\1\205\1\206"+
    "\1\0\11\56\1\110\2\56\1\0\1\56\1\0\1\56"+
    "\20\0\2\207\1\0\3\147\10\207\1\0\1\207\1\0"+
    "\11\207\1\0\2\207\1\0\1\207\1\0\1\207\20\0"+
    "\2\60\1\0\2\60\1\61\2\60\1\210\5\60\1\0"+
    "\1\60\1\0\10\60\1\211\1\62\2\60\1\0\1\60"+
    "\1\63\1\60\20\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\0\1\60\1\0\3\60\1\212\5\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\20\0\2\60\1\0\2\60"+
    "\1\61\7\60\1\213\1\0\1\60\1\0\11\60\1\62"+
    "\2\60\1\0\1\60\1\63\1\60\20\0\2\60\1\0"+
    "\2\60\1\61\5\60\1\214\2\60\1\0\1\60\1\0"+
    "\11\60\1\62\2\60\1\0\1\60\1\63\1\60\20\0"+
    "\2\60\1\0\2\60\1\61\7\60\1\211\1\0\1\60"+
    "\1\0\11\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\36\0\2\215\41\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\215\1\211\1\0\11\60\1\62\2\60\1\0\1\60"+
    "\1\63\1\60\20\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\0\1\60\1\0\3\60\1\211\5\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\20\0\2\60\1\0\2\60"+
    "\1\61\10\60\1\0\1\60\1\0\5\60\1\216\3\60"+
    "\1\62\2\60\1\0\1\60\1\63\1\60\20\0\2\60"+
    "\1\0\2\60\1\61\10\60\1\0\1\60\1\0\2\60"+
    "\1\217\6\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\47\0\1\220\31\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\0\1\60\1\0\6\60\1\216\2\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\20\0\2\164\1\0\3\123"+
    "\10\164\1\0\1\164\1\0\11\164\1\62\2\164\1\0"+
    "\1\164\1\0\1\164\20\0\2\221\1\0\13\221\1\0"+
    "\1\221\1\0\11\221\1\0\2\221\1\0\1\221\1\0"+
    "\1\221\52\0\1\222\26\0\2\60\1\0\2\60\1\61"+
    "\10\60\1\0\1\60\1\223\1\125\10\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\13\0\1\166\4\0\2\130"+
    "\1\0\1\130\2\0\1\130\1\224\6\130\1\0\1\130"+
    "\1\0\11\130\1\0\2\130\1\0\1\130\1\0\1\130"+
    "\20\0\2\130\1\0\1\130\2\0\6\130\1\225\1\130"+
    "\1\0\1\130\1\0\11\130\1\0\2\130\1\0\1\130"+
    "\1\0\1\130\20\0\2\130\1\0\1\130\2\0\5\130"+
    "\1\226\2\130\1\0\1\130\1\0\11\130\1\0\2\130"+
    "\1\0\1\130\1\0\1\130\20\0\2\56\1\0\2\56"+
    "\1\107\2\56\1\227\5\56\1\0\1\56\1\0\10\56"+
    "\1\230\1\110\2\56\1\0\1\56\1\0\1\56\20\0"+
    "\2\56\1\0\2\56\1\107\10\56\1\0\1\56\1\0"+
    "\3\56\1\231\5\56\1\110\2\56\1\0\1\56\1\0"+
    "\1\56\20\0\2\56\1\0\2\56\1\107\7\56\1\232"+
    "\1\0\1\56\1\0\11\56\1\110\2\56\1\0\1\56"+
    "\1\0\1\56\20\0\2\56\1\0\2\56\1\107\5\56"+
    "\1\233\2\56\1\0\1\56\1\0\11\56\1\110\2\56"+
    "\1\0\1\56\1\0\1\56\20\0\2\56\1\0\2\56"+
    "\1\107\7\56\1\230\1\0\1\56\1\0\11\56\1\110"+
    "\2\56\1\0\1\56\1\0\1\56\36\0\2\234\41\0"+
    "\2\56\1\0\2\56\1\107\10\56\1\234\1\230\1\0"+
    "\11\56\1\110\2\56\1\0\1\56\1\0\1\56\20\0"+
    "\2\56\1\0\2\56\1\107\10\56\1\0\1\56\1\0"+
    "\3\56\1\230\5\56\1\110\2\56\1\0\1\56\1\0"+
    "\1\56\20\0\2\56\1\0\2\56\1\107\10\56\1\0"+
    "\1\56\1\0\5\56\1\235\3\56\1\110\2\56\1\0"+
    "\1\56\1\0\1\56\20\0\2\56\1\0\2\56\1\107"+
    "\10\56\1\0\1\56\1\0\2\56\1\236\6\56\1\110"+
    "\2\56\1\0\1\56\1\0\1\56\47\0\1\237\31\0"+
    "\2\56\1\0\2\56\1\107\10\56\1\0\1\56\1\0"+
    "\6\56\1\235\2\56\1\110\2\56\1\0\1\56\1\0"+
    "\1\56\20\0\2\207\1\0\3\147\10\207\1\0\1\207"+
    "\1\0\11\207\1\110\2\207\1\0\1\207\1\0\1\207"+
    "\1\0\1\240\16\0\2\60\1\0\2\60\1\61\1\60"+
    "\1\211\6\60\1\0\1\60\1\0\11\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\20\0\2\60\1\0\2\60"+
    "\1\61\3\60\1\211\4\60\1\0\1\60\1\0\11\60"+
    "\1\62\2\60\1\0\1\60\1\63\1\60\20\0\2\60"+
    "\1\0\2\60\1\61\10\60\1\0\1\60\1\0\4\60"+
    "\1\241\4\60\1\62\2\60\1\0\1\60\1\63\1\60"+
    "\20\0\2\60\1\0\2\60\1\61\3\60\1\242\4\60"+
    "\1\0\1\60\1\0\11\60\1\62\2\60\1\0\1\60"+
    "\1\63\1\60\20\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\0\1\60\1\0\6\60\1\211\2\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\47\0\1\215\63\0\1\243"+
    "\102\0\1\166\4\0\2\130\1\0\1\130\2\0\10\130"+
    "\1\0\1\130\1\0\2\130\1\244\6\130\1\0\2\130"+
    "\1\0\1\130\1\0\1\130\20\0\2\130\1\0\1\130"+
    "\2\0\3\130\1\245\4\130\1\0\1\130\1\0\11\130"+
    "\1\0\2\130\1\0\1\130\1\0\1\130\20\0\2\130"+
    "\1\0\1\130\2\0\10\130\1\0\1\130\1\0\11\130"+
    "\1\0\2\130\1\0\1\130\1\0\1\246\20\0\2\56"+
    "\1\0\2\56\1\107\1\56\1\230\6\56\1\0\1\56"+
    "\1\0\11\56\1\110\2\56\1\0\1\56\1\0\1\56"+
    "\20\0\2\56\1\0\2\56\1\107\10\56\1\0\1\56"+
    "\1\0\11\56\1\110\2\56\1\0\1\56\1\0\1\56"+
    "\1\0\1\240\16\0\2\56\1\0\2\56\1\107\3\56"+
    "\1\230\4\56\1\0\1\56\1\0\11\56\1\110\2\56"+
    "\1\0\1\56\1\0\1\56\20\0\2\56\1\0\2\56"+
    "\1\107\10\56\1\0\1\56\1\0\4\56\1\247\4\56"+
    "\1\110\2\56\1\0\1\56\1\0\1\56\20\0\2\56"+
    "\1\0\2\56\1\107\3\56\1\250\4\56\1\0\1\56"+
    "\1\0\11\56\1\110\2\56\1\0\1\56\1\0\1\56"+
    "\62\0\1\240\16\0\2\56\1\0\2\56\1\107\10\56"+
    "\1\0\1\56\1\0\6\56\1\230\2\56\1\110\2\56"+
    "\1\0\1\56\1\0\1\56\20\0\2\56\1\0\2\56"+
    "\1\107\10\56\1\0\1\56\1\0\3\56\1\230\5\56"+
    "\1\110\2\56\1\0\1\56\1\0\1\56\1\0\1\240"+
    "\45\0\1\234\31\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\0\1\60\1\0\7\60\1\211\1\60\1\62\2\60"+
    "\1\0\1\60\1\63\1\60\20\0\2\60\1\0\2\60"+
    "\1\61\6\60\1\251\1\60\1\0\1\60\1\215\1\211"+
    "\10\60\1\62\2\60\1\0\1\60\1\63\1\60\20\0"+
    "\16\252\1\0\1\252\1\0\20\252\4\0\1\252\2\0"+
    "\3\252\1\0\1\252\1\0\1\253\2\0\2\130\1\0"+
    "\1\130\2\0\10\130\1\0\1\130\1\0\11\130\1\0"+
    "\2\130\1\0\1\130\1\0\1\130\20\0\2\130\1\0"+
    "\1\130\2\0\7\130\1\254\1\0\1\130\1\0\11\130"+
    "\1\0\2\130\1\0\1\130\1\0\1\130\20\0\2\130"+
    "\1\0\1\130\2\0\10\130\1\0\1\130\1\255\1\256"+
    "\10\130\1\0\2\130\1\0\1\130\1\0\1\130\20\0"+
    "\2\56\1\0\2\56\1\107\10\56\1\0\1\56\1\0"+
    "\7\56\1\230\1\56\1\110\2\56\1\0\1\56\1\0"+
    "\1\56\20\0\2\56\1\0\2\56\1\107\6\56\1\257"+
    "\1\56\1\0\1\56\1\234\1\230\10\56\1\110\2\56"+
    "\1\0\1\56\1\0\1\56\20\0\2\60\1\0\2\60"+
    "\1\61\4\60\1\260\3\60\1\0\1\60\1\0\11\60"+
    "\1\62\2\60\1\0\1\60\1\63\1\60\20\0\2\261"+
    "\4\252\10\261\1\0\1\261\1\0\14\261\1\252\1\261"+
    "\1\252\1\261\4\0\1\252\2\0\3\252\1\0\1\252"+
    "\1\0\1\253\2\0\1\262\2\0\1\262\2\0\10\262"+
    "\1\0\1\262\1\0\11\262\2\0\1\262\1\0\1\262"+
    "\1\0\1\262\1\263\17\0\2\130\1\0\1\130\2\0"+
    "\10\130\1\264\1\265\1\0\11\130\1\0\2\130\1\0"+
    "\1\130\1\0\1\130\15\0\1\266\60\0\1\266\2\0"+
    "\2\130\1\0\1\130\2\0\10\130\1\0\1\130\1\0"+
    "\11\130\1\0\2\130\1\0\1\130\1\0\1\130\20\0"+
    "\2\56\1\0\2\56\1\107\4\56\1\267\3\56\1\0"+
    "\1\56\1\0\11\56\1\110\2\56\1\0\1\56\1\0"+
    "\1\56\20\0\2\60\1\0\2\60\1\61\7\60\1\270"+
    "\1\0\1\60\1\0\11\60\1\62\2\60\1\0\1\60"+
    "\1\63\1\60\20\0\2\271\1\0\1\271\2\0\10\271"+
    "\1\0\1\271\1\0\11\271\1\0\2\271\1\0\1\271"+
    "\1\0\1\271\20\0\1\272\2\0\1\272\2\0\10\272"+
    "\1\0\1\272\1\0\11\272\2\0\1\272\1\0\1\272"+
    "\1\0\1\272\33\0\1\273\45\0\2\130\1\0\1\130"+
    "\2\0\5\130\1\274\2\130\1\0\1\130\1\0\11\130"+
    "\1\0\2\130\1\0\1\130\1\0\1\130\15\0\1\266"+
    "\2\0\1\275\2\0\1\275\2\0\10\275\1\0\1\275"+
    "\1\0\11\275\2\0\1\275\1\0\1\275\1\0\1\275"+
    "\20\0\2\56\1\0\2\56\1\107\7\56\1\276\1\0"+
    "\1\56\1\0\11\56\1\110\2\56\1\0\1\56\1\0"+
    "\1\56\20\0\2\60\1\0\2\60\1\61\10\60\1\277"+
    "\1\300\1\0\11\60\1\62\2\60\1\0\1\60\1\63"+
    "\1\60\20\0\2\301\1\0\1\301\2\0\10\301\1\0"+
    "\1\301\1\0\11\301\1\0\2\301\1\0\1\301\1\0"+
    "\1\301\46\0\1\255\32\0\2\130\1\0\1\130\2\0"+
    "\10\130\1\0\1\130\1\0\5\130\1\256\3\130\1\0"+
    "\2\130\1\0\1\130\1\0\1\130\20\0\2\302\1\0"+
    "\1\302\2\0\10\302\1\0\1\302\1\0\11\302\1\0"+
    "\2\302\1\0\1\302\1\0\1\302\20\0\2\56\1\0"+
    "\2\56\1\107\10\56\1\303\1\304\1\0\11\56\1\110"+
    "\2\56\1\0\1\56\1\0\1\56\34\0\1\305\44\0"+
    "\2\60\1\0\2\60\1\61\6\60\1\306\1\60\1\0"+
    "\1\60\1\0\11\60\1\62\2\60\1\0\1\60\1\63"+
    "\1\60\20\0\2\301\1\0\1\301\2\0\10\301\1\0"+
    "\1\301\1\0\11\301\1\0\2\301\1\0\1\301\1\0"+
    "\1\301\1\0\1\307\16\0\2\302\1\0\1\302\1\0"+
    "\1\310\10\302\1\0\1\302\1\0\11\302\1\0\2\302"+
    "\1\0\1\302\1\0\1\302\34\0\1\311\44\0\2\56"+
    "\1\0\2\56\1\107\6\56\1\312\1\56\1\0\1\56"+
    "\1\0\11\56\1\110\2\56\1\0\1\56\1\0\1\56"+
    "\40\0\2\215\37\0\2\60\1\0\2\60\1\61\10\60"+
    "\1\0\1\60\1\215\1\211\10\60\1\62\2\60\1\0"+
    "\1\60\1\63\1\60\20\0\1\275\2\0\1\275\2\0"+
    "\10\275\1\0\1\275\1\0\11\275\2\0\1\275\1\0"+
    "\1\275\1\0\1\275\40\0\2\234\37\0\2\56\1\0"+
    "\2\56\1\107\10\56\1\0\1\56\1\234\1\230\10\56"+
    "\1\110\2\56\1\0\1\56\1\0\1\56\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8428];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\2\1\1\11\3\1\7\11"+
    "\5\1\1\11\5\1\1\11\4\1\2\0\1\1\1\11"+
    "\1\1\14\0\3\11\1\0\1\11\4\0\2\1\2\0"+
    "\1\1\20\0\1\11\4\1\1\11\1\1\26\0\1\1"+
    "\3\0\3\1\16\0\1\1\3\0\1\11\1\0\1\1"+
    "\1\0\1\1\2\0\3\1\11\0\1\11\3\0\3\1"+
    "\5\0\1\1\1\0\1\1\2\0\1\1\3\0\1\1"+
    "\3\0\1\1\2\0\1\1\5\0\1\1\4\0\1\11"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  /* Must match WhiteSpace regex */
  private final static String WHITE_SPACE = "[ \t\f\r]+";

  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaXref(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { writeUnicodeChar(yycharat(0));
            }
          case 32: break;
          case 2: 
            { out.write(yytext());
            }
          case 33: break;
          case 3: 
            { startNewLine();
            }
          case 34: break;
          case 4: 
            { out.write(yycharat(0));
            }
          case 35: break;
          case 5: 
            { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
            }
          case 36: break;
          case 6: 
            { out.write( "&lt;");
            }
          case 37: break;
          case 7: 
            { out.write( "&gt;");
            }
          case 38: break;
          case 8: 
            { incScope(); writeUnicodeChar(yycharat(0));
            }
          case 39: break;
          case 9: 
            { decScope(); writeUnicodeChar(yycharat(0));
            }
          case 40: break;
          case 10: 
            { endScope(); writeUnicodeChar(yycharat(0));
            }
          case 41: break;
          case 11: 
            { yybegin(STRING);out.write("<span class=\"s\">\"");
            }
          case 42: break;
          case 12: 
            { yybegin(QSTRING);out.write("<span class=\"s\">\'");
            }
          case 43: break;
          case 13: 
            { out.write( "&amp;");
            }
          case 44: break;
          case 14: 
            { yybegin(YYINITIAL); out.write("\"</span>");
            }
          case 45: break;
          case 15: 
            { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
            }
          case 46: break;
          case 16: 
            { yybegin(YYINITIAL); out.write("'</span>");
            }
          case 47: break;
          case 17: 
            { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
            }
          case 48: break;
          case 18: 
            { yybegin(SCOMMENT);out.write("<span class=\"c\">//");
            }
          case 49: break;
          case 19: 
            { yybegin(COMMENT);out.write("<span class=\"c\">/*");
            }
          case 50: break;
          case 20: 
            { out.write("\\\"");
            }
          case 51: break;
          case 21: 
            { out.write("\\\\");
            }
          case 52: break;
          case 22: 
            { yybegin(YYINITIAL); out.write("*/</span>");
            }
          case 53: break;
          case 23: 
            { out.write("\\\'");
            }
          case 54: break;
          case 24: 
            { out.append("<strong>").append(yytext()).append("</strong>");
            }
          case 55: break;
          case 25: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { yybegin(JAVADOC);out.write("<span class=\"c\">/**");
            }
          case 56: break;
          case 26: 
            { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
            }
          case 57: break;
          case 27: 
            { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
            }
          case 58: break;
          case 28: 
            { writeEMailAddress(yytext());
            }
          case 59: break;
          case 29: 
            { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
            }
          case 60: break;
          case 30: 
            { appendLink(yytext());
            }
          case 61: break;
          case 31: 
            { String text = yytext();
    String[] tokens = text.split(WHITE_SPACE, 2);
    out.append("<strong>").append(tokens[0]).append("</strong>")
      .append(text.substring(tokens[0].length(),
                             text.length() - tokens[1].length()))
      .append("<em>").append(tokens[1]).append("</em>");
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
